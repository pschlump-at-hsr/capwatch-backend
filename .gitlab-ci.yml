variables:
  DOCKER_IMAGE_DOCKER: docker:stable-dind
  SONARQUBE_HOST: https://se1-sonarqube.dev.ifs.hsr.ch
  # Sonarqube token is defined as a GitLab global variable called $SONARQUBE_TOKEN
  NAME_LATEST_TAG: latest
  NAME_DEVELOP_TAG: develop
  TEST_DIR: "CapWatchBackend.WebApi.Tests"

image: $DOCKER_IMAGE_DOCKER

stages:
  - build
  - test
  - tag-develop
  - tag-master
  - deploy-develop
  - deploy-master

services:
  - docker:dind

before_script:
  # $CI_JOB_TOKEN, a special token provided by GitLab
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

# Build image for every commit
Build:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:$NAME_DEVELOP_TAG || true
    # The built image is tagged locally with the commit SHA
    - >
      docker build
      --pull
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from $CI_REGISTRY_IMAGE:$NAME_DEVELOP_TAG
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# TODO fix  failing Test stage
#   Problem ideas: 
#   - stdin out not true
#   - entrypoint have to be overwritten => this is causing an error "sh: 3: set: Illegal option -o pipefail"

#Test:
#  stage: test
#  image:
#    name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#    entrypoint: ["/bin/bash", "-c"]
#  only: ['merge_requests', 'develop', 'master']
#  script:
#    - "cd $TEST_DIR"
#    - "dotnet test"


# TODO add quality gates (sonarqube) for only: ['merge_requests', 'develop', 'master']


Tag develop:
  stage: tag-develop
  variables:
    GIT_STRATEGY: none
  only:
    - develop
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Tag it "develop"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$NAME_DEVELOP_TAG
    - docker push $CI_REGISTRY_IMAGE:$NAME_DEVELOP_TAG

Tag master:
  stage: tag-master
  variables:
    GIT_STRATEGY: none
  only: [ 'tags', 'master' ]
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Tag it with the latest tag
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    # Tag it latest for the latest master commit
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$NAME_LATEST_TAG
    - docker push $CI_REGISTRY_IMAGE:$NAME_LATEST_TAG

# TODO implement
Deploy develop:
  stage: deploy-develop
  only:
    - develop
  script:
    - echo "Hello from develop deployment"

# TODO implement
Deploy master:
  stage: deploy-master
  only:
    - master
  script:
    - echo "Hello from master deployment"